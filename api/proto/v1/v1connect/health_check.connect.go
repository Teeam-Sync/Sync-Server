// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/health_check.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Teeam-Sync/Sync-Server/api/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// HealthCheckServiceName is the fully-qualified name of the HealthCheckService service.
	HealthCheckServiceName = "proto.v1.HealthCheckService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthCheckServiceCheckProcedure is the fully-qualified name of the HealthCheckService's Check
	// RPC.
	HealthCheckServiceCheckProcedure = "/proto.v1.HealthCheckService/Check"
)

// HealthCheckServiceClient is a client for the proto.v1.HealthCheckService service.
type HealthCheckServiceClient interface {
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewHealthCheckServiceClient constructs a client for the proto.v1.HealthCheckService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthCheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthCheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthCheckServiceClient{
		check: connect.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+HealthCheckServiceCheckProcedure,
			opts...,
		),
	}
}

// healthCheckServiceClient implements HealthCheckServiceClient.
type healthCheckServiceClient struct {
	check *connect.Client[v1.CheckRequest, v1.CheckResponse]
}

// Check calls proto.v1.HealthCheckService.Check.
func (c *healthCheckServiceClient) Check(ctx context.Context, req *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// HealthCheckServiceHandler is an implementation of the proto.v1.HealthCheckService service.
type HealthCheckServiceHandler interface {
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewHealthCheckServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthCheckServiceHandler(svc HealthCheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthCheckServiceCheckHandler := connect.NewUnaryHandler(
		HealthCheckServiceCheckProcedure,
		svc.Check,
		opts...,
	)
	return "/proto.v1.HealthCheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthCheckServiceCheckProcedure:
			healthCheckServiceCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthCheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthCheckServiceHandler struct{}

func (UnimplementedHealthCheckServiceHandler) Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.HealthCheckService.Check is not implemented"))
}
